
@model UMR.Requestor.ViewModels.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
}
<div class="container-fluid">
    <div class="row g-3">
        <div class="col-md-6">
            <div class="card h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between mb-2">
                        <div class="fw-semibold">All Request</div>
                        <div class="small text-muted">Total Count : @Model.TotalCount</div>
                    </div>
                    <canvas id="allRequestsChart" height="140"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between mb-2">
                        <div class="fw-semibold">Business Areas Request</div>
                        <div class="small text-muted">Total Count : @Model.BusinessAreaCounts.Values.Sum()</div>
                    </div>
                    <canvas id="businessAreaChart" height="140"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="row g-3 mt-1">
        @foreach (var c in Model.Cards)
        {
            <div class="col-md-3">
                <div class="card mini-card @c.Css text-white">
                    <div class="card-body d-flex align-items-center justify-content-between">
                        <div>
                            <div class="small">@c.Title</div>
                            <div class="fs-4 fw-bold">@c.Count</div>
                        </div>
                        <div class="opacity-75 display-6">â¬¤</div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts{
<script>
    const allData = {
        labels: ['Completed','Pending','Reject'],
        datasets: [{
            data: [@Model.Completed, @Model.Pending, @Model.Rejected],
            backgroundColor: ['#28a745', '#ffc107', '#dc3545'],
        }]
    };
    new Chart(document.getElementById('allRequestsChart'), { type: 'doughnut', data: allData });

    const baLabels = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.BusinessAreaCounts.Keys));
    const baValues = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.BusinessAreaCounts.Values));
    new Chart(document.getElementById('businessAreaChart'), {
        type: 'doughnut', data: { labels: baLabels, datasets: [{ data: baValues, backgroundColor: ['#0d6efd','#20c997','#6610f2','#fd7e14','#6c757d'] }] },
        options: { cutout: '65%' }
    });
</script>
}
